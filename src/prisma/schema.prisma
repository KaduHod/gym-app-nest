datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                                               Int                 @id @default(autoincrement()) @db.UnsignedInt
  name                                             String?             @db.VarChar(55)
  nickname                                         String?             @unique(map: "users_nickname_unique") @db.VarChar(30)
  email                                            String?             @unique(map: "users_email_unique") @db.VarChar(100)
  password                                         String?             @db.VarChar(255)
  cellphone                                        String?             @db.VarChar(20)
  createdAt                                        DateTime?           @default(now()) @db.DateTime(0)
  updatedAt                                        DateTime?           @db.DateTime(0)
  personal_aluno_personal_aluno_personal_idTousers personal_aluno[]    @relation("personal_aluno_personal_idTousers")
  personal_aluno_personal_aluno_aluno_idTousers    personal_aluno[]    @relation("personal_aluno_aluno_idTousers")
  users_permissions                                users_permissions[]

  @@map(name: "users")
}

model users_permissions {
  id            Int        @id @default(autoincrement()) @db.UnsignedInt
  user_id       Int        @db.UnsignedInt
  permission_id Int        @db.UnsignedInt
  createdAt     DateTime?  @default(now()) @db.DateTime(0)
  updatedAt     DateTime?  @db.DateTime(0)
  User          User       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_permissions_ibfk_1")
  permissions   Permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_permissions_ibfk_2")

  @@index([permission_id], map: "permission_id")
  @@index([user_id], map: "user_id")
}


model Articulation {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  name                  String                  @db.VarChar(255)
  createdAt             DateTime?               @default(now()) @db.DateTime(0)
  updatedAt             DateTime?               @db.DateTime(0)
  Portions              MusclePortion[] 
  @@map(name: "articulations")
}

model MusclePortion {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  image              String?              @db.VarChar(255)
  muscleGroup_id     Int
  created_at         DateTime?            @default(now()) @db.DateTime(0)
  updated_at         DateTime?            @db.DateTime(0)
  Articulations      Articulation[] 
  Group              MuscleGroup          @relation(fields: [muscleGroup_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "muscle_portion_muscleGRoup")


  @@index([muscleGroup_id], map: "muscle_portion_muscleGRoup")
  @@map(name: "muscle_portion")
}

model Exercicio {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  createdAt                DateTime?                  @default(now()) @db.DateTime(0)
  updatedAt                DateTime?                  @db.DateTime(0)
  name                     String                     @db.VarChar(255)
  force                    String?                    @db.VarChar(255)
  link                     String?                    @db.VarChar(255)
  execution                String?                    @db.Text
  mechanic                 String?                    @db.Text
  exercise_muscle          exercise_muscle[]
  exercise_muscle_portions exercise_muscle_portions[]

  @@map(name: "exercicios")
}

model exercise_muscle_portions {
  id                Int                            @id @default(autoincrement())
  muscle_portion_id Int
  exercise_id       Int                            @db.UnsignedInt
  createdAt         DateTime?                      @default(now()) @db.DateTime(0)
  updatedAt         DateTime?                      @db.DateTime(0)
  role              exercise_muscle_portions_role?
  Exercicio         Exercicio                      @relation(fields: [exercise_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "exercise_muscle_portions_exercise_id_foreign")

  @@index([muscle_portion_id], map: "exercise_exercise_muscle_portions_id_foreign")
  @@index([exercise_id], map: "exercise_muscle_portions_exercise_id_foreign")
}

model movement_muscle {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  muscle_id   Int       @db.UnsignedInt
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @db.DateTime(0)
  movement_id Int       @db.UnsignedInt
  Movements   Movements @relation(fields: [movement_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Movements_id")
  Muscle      Muscle    @relation(fields: [muscle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "muscle_articulation_Movements_muscle_id_foreign")

  @@index([movement_id], map: "FK_Movements_id")
  @@index([muscle_id], map: "muscle_articulation_Movements_muscle_id_foreign")
}

model Movements {
  id                           Int                            @id @default(autoincrement()) @db.UnsignedInt
  name                         String                         @db.VarChar(255)
  createdAt                    DateTime?                      @default(now()) @db.DateTime(0)
  updatedAt                    DateTime?                      @db.DateTime(0)
  articulation_movement        articulation_movement[]
  articulation_movement_muscle articulation_movement_muscle[]
  movement_muscle              movement_muscle[]

  @@map(name: "movements")
}

model MuscleGroup {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(20)
  image         String?         @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.DateTime(0)
  updated_at    DateTime?       @db.DateTime(0)
  MusclePortion MusclePortion[]

  @@map(name: "muscle_group")
}

model Muscle {
  id                           Int                            @id @default(autoincrement()) @db.UnsignedInt
  name                         String                         @db.VarChar(255)
  image                        String?                        @db.VarChar(255)
  createdAt                    DateTime?                      @default(now()) @db.DateTime(0)
  updatedAt                    DateTime?                      @db.DateTime(0)
  articulation_movement_muscle articulation_movement_muscle[]
  exercise_muscle              exercise_muscle[]
  movement_muscle              movement_muscle[]

  @@map(name: "muscles")
}

model Periodizacoes {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  createdAt DateTime? @default(now()) @db.DateTime(0)
  updatedAt DateTime? @db.DateTime(0)

  @@map(name: "periodizacoes")
}

model Permission {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  title             String              @db.VarChar(45)
  createdAt         DateTime?           @default(now()) @db.DateTime(0)
  updatedAt         DateTime?           @db.DateTime(0)
  users_permissions users_permissions[]

  @@map(name: "permissions")
}

model personal_aluno {
  id                                      Int       @id @default(autoincrement()) @db.UnsignedInt
  personal_id                             Int       @db.UnsignedInt
  aluno_id                                Int       @db.UnsignedInt
  createdAt                               DateTime? @default(now()) @db.DateTime(0)
  updatedAt                               DateTime? @db.DateTime(0)
  users_personal_aluno_personal_idTousers User      @relation("personal_aluno_personal_idTousers", fields: [personal_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "personal_aluno_ibfk_1")
  users_personal_aluno_aluno_idTousers    User      @relation("personal_aluno_aluno_idTousers", fields: [aluno_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "personal_aluno_ibfk_2")

  @@index([aluno_id], map: "aluno_id")
  @@index([personal_id], map: "personal_id")
}

model Treino {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  createdAt DateTime? @default(now()) @db.DateTime(0)
  updatedAt DateTime? @db.DateTime(0)

  @@map(name: "treinos")
}

model exercise_muscle {
  id          Int                   @id @default(autoincrement()) @db.UnsignedInt
  muscle_id   Int                   @db.UnsignedInt
  exercise_id Int                   @db.UnsignedInt
  createdAt   DateTime?             @default(now()) @db.DateTime(0)
  updatedAt   DateTime?             @db.DateTime(0)
  role        exercise_muscle_role?
  Exercicio   Exercicio             @relation(fields: [exercise_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "exercise_muscle_exercise_id_foreign")
  Muscle      Muscle                @relation(fields: [muscle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "exercise_muscle_muscle_id_foreign")

  @@index([exercise_id], map: "exercise_muscle_exercise_id_foreign")
  @@index([muscle_id], map: "exercise_muscle_muscle_id_foreign")
}

enum exercise_muscle_portions_role {
  agonist
  synergist
  stabilizer
  antagonist_stabilizer @map("antagonist stabilizer")
  dynamic_stabilizer    @map("dynamic stabilizer")
}

enum exercise_muscle_role {
  agonist
  synergist
  stabilizer
  antagonist_stabilizer @map("antagonist stabilizer")
  dynamic_stabilizer    @map("dynamic stabilizer")
}

enum articulation_movement_muscle_role {
  agonist
  synergist
  stabilizer
  antagonist_stabilizer @map("antagonist stabilizer")
  dynamic_stabilizer    @map("dynamic stabilizer")
}

model articulation_movement_muscle {
  id              Int                                @id @default(autoincrement()) @db.UnsignedInt
  createdAt       DateTime?                          @default(now()) @db.DateTime(0)
  updatedAt       DateTime?                          @db.DateTime(0)
  muscle_id       Int                                @db.UnsignedInt
  movement_id     Int                                @db.UnsignedInt
  articulation_id Int                                @db.UnsignedInt
  role            articulation_movement_muscle_role?
  Movements       Movements                          @relation(fields: [movement_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_movement_id")
  Muscle          Muscle                             @relation(fields: [muscle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_muscle_id")

  @@index([articulation_id], map: "articulation_movement_muscle_articulation_id_foreign")
  @@index([movement_id], map: "articulation_movement_muscle_movement_id_foreign")
  @@index([muscle_id], map: "articulation_movement_muscle_muscle_id_foreign")
}